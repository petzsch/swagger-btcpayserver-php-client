<?php
/**
 * BuyerInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BTCPay Greenfield API
 *
 * A full API to use your BTCPay Server
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BuyerInformation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuyerInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BuyerInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'buyer_name' => 'string',
'buyer_email' => 'string',
'buyer_country' => 'string',
'buyer_zip' => 'string',
'buyer_state' => 'string',
'buyer_city' => 'string',
'buyer_address2' => 'string',
'buyer_address1' => 'string',
'buyer_phone' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'buyer_name' => null,
'buyer_email' => null,
'buyer_country' => null,
'buyer_zip' => null,
'buyer_state' => null,
'buyer_city' => null,
'buyer_address2' => null,
'buyer_address1' => null,
'buyer_phone' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buyer_name' => 'buyerName',
'buyer_email' => 'buyerEmail',
'buyer_country' => 'buyerCountry',
'buyer_zip' => 'buyerZip',
'buyer_state' => 'buyerState',
'buyer_city' => 'buyerCity',
'buyer_address2' => 'buyerAddress2',
'buyer_address1' => 'buyerAddress1',
'buyer_phone' => 'buyerPhone'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buyer_name' => 'setBuyerName',
'buyer_email' => 'setBuyerEmail',
'buyer_country' => 'setBuyerCountry',
'buyer_zip' => 'setBuyerZip',
'buyer_state' => 'setBuyerState',
'buyer_city' => 'setBuyerCity',
'buyer_address2' => 'setBuyerAddress2',
'buyer_address1' => 'setBuyerAddress1',
'buyer_phone' => 'setBuyerPhone'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buyer_name' => 'getBuyerName',
'buyer_email' => 'getBuyerEmail',
'buyer_country' => 'getBuyerCountry',
'buyer_zip' => 'getBuyerZip',
'buyer_state' => 'getBuyerState',
'buyer_city' => 'getBuyerCity',
'buyer_address2' => 'getBuyerAddress2',
'buyer_address1' => 'getBuyerAddress1',
'buyer_phone' => 'getBuyerPhone'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['buyer_name'] = isset($data['buyer_name']) ? $data['buyer_name'] : null;
        $this->container['buyer_email'] = isset($data['buyer_email']) ? $data['buyer_email'] : null;
        $this->container['buyer_country'] = isset($data['buyer_country']) ? $data['buyer_country'] : null;
        $this->container['buyer_zip'] = isset($data['buyer_zip']) ? $data['buyer_zip'] : null;
        $this->container['buyer_state'] = isset($data['buyer_state']) ? $data['buyer_state'] : null;
        $this->container['buyer_city'] = isset($data['buyer_city']) ? $data['buyer_city'] : null;
        $this->container['buyer_address2'] = isset($data['buyer_address2']) ? $data['buyer_address2'] : null;
        $this->container['buyer_address1'] = isset($data['buyer_address1']) ? $data['buyer_address1'] : null;
        $this->container['buyer_phone'] = isset($data['buyer_phone']) ? $data['buyer_phone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buyer_name
     *
     * @return string
     */
    public function getBuyerName()
    {
        return $this->container['buyer_name'];
    }

    /**
     * Sets buyer_name
     *
     * @param string $buyer_name buyer_name
     *
     * @return $this
     */
    public function setBuyerName($buyer_name)
    {
        $this->container['buyer_name'] = $buyer_name;

        return $this;
    }

    /**
     * Gets buyer_email
     *
     * @return string
     */
    public function getBuyerEmail()
    {
        return $this->container['buyer_email'];
    }

    /**
     * Sets buyer_email
     *
     * @param string $buyer_email buyer_email
     *
     * @return $this
     */
    public function setBuyerEmail($buyer_email)
    {
        $this->container['buyer_email'] = $buyer_email;

        return $this;
    }

    /**
     * Gets buyer_country
     *
     * @return string
     */
    public function getBuyerCountry()
    {
        return $this->container['buyer_country'];
    }

    /**
     * Sets buyer_country
     *
     * @param string $buyer_country buyer_country
     *
     * @return $this
     */
    public function setBuyerCountry($buyer_country)
    {
        $this->container['buyer_country'] = $buyer_country;

        return $this;
    }

    /**
     * Gets buyer_zip
     *
     * @return string
     */
    public function getBuyerZip()
    {
        return $this->container['buyer_zip'];
    }

    /**
     * Sets buyer_zip
     *
     * @param string $buyer_zip buyer_zip
     *
     * @return $this
     */
    public function setBuyerZip($buyer_zip)
    {
        $this->container['buyer_zip'] = $buyer_zip;

        return $this;
    }

    /**
     * Gets buyer_state
     *
     * @return string
     */
    public function getBuyerState()
    {
        return $this->container['buyer_state'];
    }

    /**
     * Sets buyer_state
     *
     * @param string $buyer_state buyer_state
     *
     * @return $this
     */
    public function setBuyerState($buyer_state)
    {
        $this->container['buyer_state'] = $buyer_state;

        return $this;
    }

    /**
     * Gets buyer_city
     *
     * @return string
     */
    public function getBuyerCity()
    {
        return $this->container['buyer_city'];
    }

    /**
     * Sets buyer_city
     *
     * @param string $buyer_city buyer_city
     *
     * @return $this
     */
    public function setBuyerCity($buyer_city)
    {
        $this->container['buyer_city'] = $buyer_city;

        return $this;
    }

    /**
     * Gets buyer_address2
     *
     * @return string
     */
    public function getBuyerAddress2()
    {
        return $this->container['buyer_address2'];
    }

    /**
     * Sets buyer_address2
     *
     * @param string $buyer_address2 buyer_address2
     *
     * @return $this
     */
    public function setBuyerAddress2($buyer_address2)
    {
        $this->container['buyer_address2'] = $buyer_address2;

        return $this;
    }

    /**
     * Gets buyer_address1
     *
     * @return string
     */
    public function getBuyerAddress1()
    {
        return $this->container['buyer_address1'];
    }

    /**
     * Sets buyer_address1
     *
     * @param string $buyer_address1 buyer_address1
     *
     * @return $this
     */
    public function setBuyerAddress1($buyer_address1)
    {
        $this->container['buyer_address1'] = $buyer_address1;

        return $this;
    }

    /**
     * Gets buyer_phone
     *
     * @return string
     */
    public function getBuyerPhone()
    {
        return $this->container['buyer_phone'];
    }

    /**
     * Sets buyer_phone
     *
     * @param string $buyer_phone buyer_phone
     *
     * @return $this
     */
    public function setBuyerPhone($buyer_phone)
    {
        $this->container['buyer_phone'] = $buyer_phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
