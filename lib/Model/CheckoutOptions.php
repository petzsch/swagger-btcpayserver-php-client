<?php
/**
 * CheckoutOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BTCPay Greenfield API
 *
 * A full API to use your BTCPay Server
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CheckoutOptions Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CheckoutOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CheckoutOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'speed_policy' => 'OneOfCheckoutOptionsSpeedPolicy',
'payment_methods' => 'string[]',
'redirect_automatically' => 'bool',
'redirect_uri' => 'string',
'web_hook' => 'string',
'expiration_time' => '\DateTime',
'payment_tolerance' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'speed_policy' => null,
'payment_methods' => null,
'redirect_automatically' => null,
'redirect_uri' => null,
'web_hook' => 'uri',
'expiration_time' => 'date-time',
'payment_tolerance' => 'double'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'speed_policy' => 'speedPolicy',
'payment_methods' => 'paymentMethods',
'redirect_automatically' => 'redirectAutomatically',
'redirect_uri' => 'redirectUri',
'web_hook' => 'webHook',
'expiration_time' => 'expirationTime',
'payment_tolerance' => 'paymentTolerance'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'speed_policy' => 'setSpeedPolicy',
'payment_methods' => 'setPaymentMethods',
'redirect_automatically' => 'setRedirectAutomatically',
'redirect_uri' => 'setRedirectUri',
'web_hook' => 'setWebHook',
'expiration_time' => 'setExpirationTime',
'payment_tolerance' => 'setPaymentTolerance'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'speed_policy' => 'getSpeedPolicy',
'payment_methods' => 'getPaymentMethods',
'redirect_automatically' => 'getRedirectAutomatically',
'redirect_uri' => 'getRedirectUri',
'web_hook' => 'getWebHook',
'expiration_time' => 'getExpirationTime',
'payment_tolerance' => 'getPaymentTolerance'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['speed_policy'] = isset($data['speed_policy']) ? $data['speed_policy'] : null;
        $this->container['payment_methods'] = isset($data['payment_methods']) ? $data['payment_methods'] : null;
        $this->container['redirect_automatically'] = isset($data['redirect_automatically']) ? $data['redirect_automatically'] : null;
        $this->container['redirect_uri'] = isset($data['redirect_uri']) ? $data['redirect_uri'] : null;
        $this->container['web_hook'] = isset($data['web_hook']) ? $data['web_hook'] : null;
        $this->container['expiration_time'] = isset($data['expiration_time']) ? $data['expiration_time'] : null;
        $this->container['payment_tolerance'] = isset($data['payment_tolerance']) ? $data['payment_tolerance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets speed_policy
     *
     * @return OneOfCheckoutOptionsSpeedPolicy
     */
    public function getSpeedPolicy()
    {
        return $this->container['speed_policy'];
    }

    /**
     * Sets speed_policy
     *
     * @param OneOfCheckoutOptionsSpeedPolicy $speed_policy This is a risk mitigation parameter for the merchant to configure how they want to fulfill orders depending on the number of block confirmations for the transaction made by the consumer on the selected cryptocurrency
     *
     * @return $this
     */
    public function setSpeedPolicy($speed_policy)
    {
        $this->container['speed_policy'] = $speed_policy;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return string[]
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param string[] $payment_methods A specific set of payment methods to use for this invoice
     *
     * @return $this
     */
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets redirect_automatically
     *
     * @return bool
     */
    public function getRedirectAutomatically()
    {
        return $this->container['redirect_automatically'];
    }

    /**
     * Sets redirect_automatically
     *
     * @param bool $redirect_automatically Whether to redirect to the redirectUri automatically after the invoice has been paid. Default to the store setting (which is `false` by default)
     *
     * @return $this
     */
    public function setRedirectAutomatically($redirect_automatically)
    {
        $this->container['redirect_automatically'] = $redirect_automatically;

        return $this;
    }

    /**
     * Gets redirect_uri
     *
     * @return string
     */
    public function getRedirectUri()
    {
        return $this->container['redirect_uri'];
    }

    /**
     * Sets redirect_uri
     *
     * @param string $redirect_uri This is the URL for a return link that is displayed on the receipt, to return the shopper back to your website after a successful purchase. This could be a page specific to the order, or to their account.
     *
     * @return $this
     */
    public function setRedirectUri($redirect_uri)
    {
        $this->container['redirect_uri'] = $redirect_uri;

        return $this;
    }

    /**
     * Gets web_hook
     *
     * @return string
     */
    public function getWebHook()
    {
        return $this->container['web_hook'];
    }

    /**
     * Sets web_hook
     *
     * @param string $web_hook A URL to send webhook notification to. Sent when the status changes or a payment is detected
     *
     * @return $this
     */
    public function setWebHook($web_hook)
    {
        $this->container['web_hook'] = $web_hook;

        return $this;
    }

    /**
     * Gets expiration_time
     *
     * @return \DateTime
     */
    public function getExpirationTime()
    {
        return $this->container['expiration_time'];
    }

    /**
     * Sets expiration_time
     *
     * @param \DateTime $expiration_time When the invoice expires. By default will use the store settings (which is set to 15 minutes by default)
     *
     * @return $this
     */
    public function setExpirationTime($expiration_time)
    {
        $this->container['expiration_time'] = $expiration_time;

        return $this;
    }

    /**
     * Gets payment_tolerance
     *
     * @return string
     */
    public function getPaymentTolerance()
    {
        return $this->container['payment_tolerance'];
    }

    /**
     * Sets payment_tolerance
     *
     * @param string $payment_tolerance A percentage dtermining whether to count the invoice as paid when the invoice is paid within the specified margin of error
     *
     * @return $this
     */
    public function setPaymentTolerance($payment_tolerance)
    {
        $this->container['payment_tolerance'] = $payment_tolerance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
